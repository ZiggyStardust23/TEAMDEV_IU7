name: Deploy Telegram Bot

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получение кода из репозитория
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получаем всю историю коммитов

      # Шаг 2: Настройка SSH-доступа
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 3: Подготовка сервера
      - name: Prepare server environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Создаем резервную копию предыдущей версии
            if [ -d ~/bot ]; then
              mv ~/bot ~/bot_backup_$(date +%Y%m%d_%H%M%S)
            fi
            
            # Создаем новую чистую директорию
            mkdir -p ~/bot
            echo 'Server prepared'
          "

      # Шаг 4: Копирование файлов
      - name: Sync project files
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude={'.git','.github','.gitignore','*.pyc','__pycache__'} \
            ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/bot/
          
          echo "Files synchronized successfully"

      # Шаг 5: Настройка прав доступа
      - name: Configure permissions
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Безопасные права для конфиденциальных файлов
            chmod 600 ~/bot/.env
            chmod 700 ~/bot/db/
            
            # Основные права на чтение
            find ~/bot -type f -exec chmod 644 {} \;
            find ~/bot -type d -exec chmod 755 {} \;
            
            # Исполняемые права для скриптов
            chmod +x ~/bot/*.py
          "

      # Шаг 6: Запуск сервисов
      - name: Restart bot services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Останавливаем предыдущие процессы
            pkill -f 'python3 main.py' || true
            pkill -f 'python3 db/db.py' || true
            
            # Запускаем новые процессы
            cd ~/bot
            nohup python3 -B db/db.py > db.log 2>&1 &
            sleep 2  # Даем время для инициализации БД
            nohup python3 -B main.py > bot.log 2>&1 &
            
            # Проверяем что процессы запустились
            pgrep -f 'python3' || echo 'Processes failed to start'
          "

      # Шаг 7: Проверка статуса (опционально)
      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            sleep 5  # Даем время для запуска
            tail -n 10 ~/bot/bot.log
            echo -e '\nDeployment verification complete'
          "
