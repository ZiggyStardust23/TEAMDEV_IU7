import logging
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from db import Base, User, Monster  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ models.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URI = 'postgresql+psycopg2://postgres:3259@localhost:5433/teamdev'

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_engine(DATABASE_URI)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
Session = sessionmaker(bind=engine)
session = Session()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '8079560430:AAF66xiKN5P-POGt0geZOctpOPEWMcsmZlA'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üìú –ö–≤–µ—Å—Ç—ã"]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u_tg_id = str(update.effective_user.id)
    username = update.effective_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if user:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            reply_markup=main_menu_keyboard()
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        keyboard = [
            [InlineKeyboardButton("–ú–∞–≥", callback_data='class_mage')],
            [InlineKeyboardButton("–í–æ–∏–Ω", callback_data='class_warrior')],
            [InlineKeyboardButton("–õ—É—á–Ω–∏–∫", callback_data='class_archer')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    u_tg_id = str(query.from_user.id)
    username = query.from_user.username

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
    if query.data == 'class_mage':
        class_ = "Mage"
        health = 80
        mana = 100
        attack = 8
        defense = 3
        abilities = {"skill1": "Fireball"}
        inventory = {"item1": "Staff"}
    elif query.data == 'class_warrior':
        class_ = "Warrior"
        health = 100
        mana = 50
        attack = 10
        defense = 5
        abilities = {"skill1": "Slash"}
        inventory = {"item1": "Sword"}
    elif query.data == 'class_archer':
        class_ = "Archer"
        health = 90
        mana = 60
        attack = 12
        defense = 4
        abilities = {"skill1": "Arrow Shot"}
        inventory = {"item1": "Bow"}

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    new_user = User(
        tg_id=u_tg_id,
        username=username,
        class_=class_,
        level=1,
        xp=0,
        health=health,
        mana=mana,
        attack=attack,
        defense=defense,
        gold=0,
        energy=10,
        abilities=abilities,
        inventory=inventory
    )
    session.add(new_user)
    session.commit()
    
    await query.edit_message_text(
        text=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! –í—ã ‚Äî {class_}.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        reply_markup=main_menu_keyboard()
    )


# –ö–æ–º–∞–Ω–¥–∞ /profile ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if user:
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user.username}\n"
            f"–ö–ª–∞—Å—Å: {user.class_}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"–û–ø—ã—Ç: {user.xp}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {user.health}\n"
            f"–ú–∞–Ω–∞: {user.mana}\n"
            f"–ê—Ç–∞–∫–∞: {user.attack}\n"
            f"–ó–∞—â–∏—Ç–∞: {user.defense}\n"
            f"–ó–æ–ª–æ—Ç–æ: {user.gold}\n"
            f"–≠–Ω–µ—Ä–≥–∏—è: {user.energy}\n"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=profile_text,
            reply_markup=main_menu_keyboard()
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )

'''
# –ö–æ–º–∞–Ω–¥–∞ /fight ‚Äî –±–∏—Ç–≤–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
async def fight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    user = session.query(User).filter_by(user_id=user_id).first()

    if not user:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–Ω–µ—Ä–≥–∏—è
    if user.energy <= 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    monster = session.query(Monster).order_by(Monster.monster_id).first()

    if monster:
        # –õ–æ–≥–∏–∫–∞ –±–æ—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        user_attack = random.randint(5, 15)  # –°–ª—É—á–∞–π–Ω–∞—è –∞—Ç–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        monster_damage = max(0, user_attack - monster.defense)
        monster.health -= monster_damage

        if monster.health <= 0:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏–ª
            reward_gold = random.randint(10, 20)
            reward_xp = random.randint(20, 30)

            user.gold += reward_gold
            user.xp += reward_xp
            user.energy -= 1
            session.commit()

            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]
            ])

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞ {monster.name}!\n"
                     f"–ü–æ–ª—É—á–µ–Ω–æ: {reward_gold} –∑–æ–ª–æ—Ç–∞ –∏ {reward_xp} –æ–ø—ã—Ç–∞.",
                reply_markup=keyboard
            )
        else:
            # –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–¥–∏–ª
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ú–æ–Ω—Å—Ç—Ä {monster.name} –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–º! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.",
                reply_markup=main_menu_keyboard()
            )

# –ö–æ–º–∞–Ω–¥–∞ /shop ‚Äî –º–∞–≥–∞–∑–∏–Ω (–∑–∞–≥–ª—É—à–∫–∞)
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ï–©–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢",
        reply_markup=main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /quest ‚Äî –∫–≤–µ—Å—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
async def quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ï–©–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢",
        reply_markup=main_menu_keyboard()
    )
'''


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.Regex("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), profile))
    #application.add_handler(MessageHandler(filters.Regex("‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º"), fight))
    #application.add_handler(MessageHandler(filters.Regex("üõí –ú–∞–≥–∞–∑–∏–Ω"), shop))
    #application.add_handler(MessageHandler(filters.Regex("üìú –ö–≤–µ—Å—Ç—ã"), quest))

    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()