import json
import logging
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm.attributes import flag_modified
from db import Base, Item, User, Monster  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ models.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URI = 'postgresql+psycopg2://postgres:3259@localhost:5433/teamdev'

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_engine(DATABASE_URI)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
Session = sessionmaker(bind=engine)
session = Session()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '8079560430:AAF66xiKN5P-POGt0geZOctpOPEWMcsmZlA'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üìú –ö–≤–µ—Å—Ç—ã"]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u_tg_id = str(update.effective_user.id)
    username = update.effective_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if user:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            reply_markup=main_menu_keyboard()
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        keyboard = [
            [InlineKeyboardButton("–ú–∞–≥", callback_data='class_mage')],
            [InlineKeyboardButton("–í–æ–∏–Ω", callback_data='class_warrior')],
            [InlineKeyboardButton("–õ—É—á–Ω–∏–∫", callback_data='class_archer')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    u_tg_id = str(query.from_user.id)
    username = query.from_user.username

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
    if query.data == 'class_mage':
        class_ = "Mage"
        health = 80
        mana = 100
        attack = 8
        defense = 3
        abilities = {"skill1": "Fireball"}
        inventory = {"item1": "Staff"}
    elif query.data == 'class_warrior':
        class_ = "Warrior"
        health = 100
        mana = 50
        attack = 10
        defense = 5
        abilities = {"skill1": "Slash"}
        inventory = {"item1": "Sword"}
    elif query.data == 'class_archer':
        class_ = "Archer"
        health = 90
        mana = 60
        attack = 12
        defense = 4
        abilities = {"skill1": "Arrow Shot"}
        inventory = {"item1": "Bow"}

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    new_user = User(
        tg_id=u_tg_id,
        username=username,
        class_=class_,
        level=1,
        xp=0,
        health=health,
        mana=mana,
        attack=attack,
        defense=defense,
        gold=0,
        energy=10,
        abilities=abilities,
        inventory=inventory
    )
    session.add(new_user)
    session.commit()
    
    await query.edit_message_text(
        text=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! –í—ã ‚Äî {class_}.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        reply_markup=main_menu_keyboard()
    )


# –ö–æ–º–∞–Ω–¥–∞ /profile ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if not user:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory_items = user.inventory if isinstance(user.inventory, dict) else {}
    inventory_text = "üì≠ –ü—É—Å—Ç–æ"
    
    if inventory_items:
        print(inventory_items)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏–∑ –ë–î –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        item_ids = [int(item_id) for item_id in inventory_items.keys()]
        items = session.query(Item).filter(Item.item_id.in_(item_ids)).all() if item_ids else []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        items_dict = {str(item.item_id): item for item in items}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_lines = []
        for item_id, count in inventory_items.items():
            item = items_dict.get(item_id)
            if item:
                line = f"üîπ {item.name}: {count} —à—Ç."
                if item.attack_bonus > 0:
                    line += f" (+{item.attack_bonus}‚öî)"
                if item.defense_bonus > 0:
                    line += f" (+{item.defense_bonus}üõ°)"
                inventory_lines.append(line)
        
        inventory_text = "\n".join(inventory_lines) if inventory_lines else "üì≠ –ü—É—Å—Ç–æ"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å {user.username}*\n"
        f"‚öúÔ∏è –£—Ä–æ–≤–µ–Ω—å: *{user.level}* (–û–ø—ã—Ç: {user.xp}/{user.level * 100 + 100})\n"
        f"üèÖ –ö–ª–∞—Å—Å: *{user.class_}*\n\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: *{user.attack}*  |  üõ° –ó–∞—â–∏—Ç–∞: *{user.defense}*\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: *{user.health}*\n"
        f"üîÆ –ú–∞–Ω–∞: *{user.mana}*\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: *{user.energy}/10*\n"
        f"üí∞ –ó–æ–ª–æ—Ç–æ: *{user.gold}*\n\n"
        f"üéí *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ({len(inventory_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)*:\n{inventory_text}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
    energy_bar = "LITENERG" #‚ö°[" + "‚ñà" * user.energy + "‚ñë" * (10 - user.energy) + "]"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
   # if user.active_quest:
    #    quest = session.query(Quest).get(user.active_quest)
     #   if quest:
      #      profile_text += f"\n\nüìú *–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç*: {quest.name}\n"
       #     profile_text += f"‚ñ∏ {quest.description}\n"
        #    profile_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {user.quest_progress}/{quest.required}"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{profile_text}\n\n{energy_bar}",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )


def get_random_monster():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Å—Å–∏–∏ –ë–î)"""
    monsters = session.query(Monster).all()
    monster = random.choice(monsters)
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    from copy import deepcopy
    return deepcopy(monster)

# –ö–æ–º–∞–Ω–¥–∞ /fight ‚Äî –±–∏—Ç–≤–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
async def fight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if not user:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )
        return

    if user.energy <= 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑ –ë–î)
    mock_skills = [
        {"id": 1, "name": "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", "mana_cost": 10, "type": "damage", "power": 15},
        {"id": 2, "name": "–õ–µ—á–µ–Ω–∏–µ", "mana_cost": 8, "type": "heal", "power": 20},
        {"id": 3, "name": "–©–∏—Ç", "mana_cost": 5, "type": "buff_defense", "power": 7}
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
    monster = get_random_monster()
    current_round = 1
    monster_current_hp = monster.health
    user_current_hp = user.health
    user_current_mana = user.mana
    
        
        
    inventory_items = user.inventory if isinstance(user.inventory, dict) else {}
    
    if inventory_items:
        print(inventory_items)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏–∑ –ë–î –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        item_ids = [int(item_id) for item_id in inventory_items.keys()]
        items = session.query(Item).filter(Item.item_id.in_(item_ids)).all() if item_ids else []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        items_dict = {str(item.item_id): item for item in items}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inv = []
        for item_id, count in inventory_items.items():
            item = items_dict.get(item_id)
            if item:
                inv.append({
                    "id": item.item_id,
                    "name": item.name,
                    "type": item.type,
                    "count": count,
                    "power": item.power 
                })

    
    print(items_dict)
    print(inv)
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ös
    context.user_data['fight_context'] = {
        'monster': monster,
        'monster_hp': monster_current_hp,
        'user_hp': user_current_hp,
        'user_mana': user_current_mana,
        'round': current_round,
        'user_energy': user.energy,
        'items': inv,
        'skills': mock_skills,  # –ú–æ–∫ –Ω–∞–≤—ã–∫–æ–≤
        'buffs': {'attack': 0, 'defense': 0}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞—Ñ—Ñ—ã
    }
    
    await send_round_info(update, context, user, monster, current_round)

async def send_round_info(update, context, user, monster, round_num):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    fight_context = context.user_data['fight_context']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏
    keyboard.append([InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="fight_attack")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 3 –º–æ–∫-–ø—Ä–µ–¥–º–µ—Ç–∞)
    for item in fight_context['items'][:3]:
        keyboard.append([InlineKeyboardButton(f"üéí {item['name']} - {item['count']}—à—Ç", 
                                          callback_data=f"fight_useitem_{item['id']}")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ (–ø–µ—Ä–≤—ã–µ 3 –º–æ–∫-–Ω–∞–≤—ã–∫–∞)
    for skill in fight_context['skills'][:3]:
        keyboard.append([InlineKeyboardButton(f"üîÆ {skill['name']} (üîµ{skill['mana_cost']})", 
                                          callback_data=f"fight_useskill_{skill['id']}")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–±–µ–≥–∞ (—Å —à–∞–Ω—Å–æ–º –Ω–µ—É–¥–∞—á–∏)
    keyboard.append([InlineKeyboardButton("üèÉ –ë–µ–∂–∞—Ç—å", callback_data="fight_flee")])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞—Ñ—Ñ—ã
    buffs_text = ""
    if fight_context['buffs']['attack'] > 0:
        buffs_text += f"\n‚öîÔ∏è –ë–∞—Ñ—Ñ –∞—Ç–∞–∫–∏: +{fight_context['buffs']['attack']}"
    if fight_context['buffs']['defense'] > 0:
        buffs_text += f"\nüõ°Ô∏è –ë–∞—Ñ—Ñ –∑–∞—â–∏—Ç—ã: +{fight_context['buffs']['defense']}"
    
    message = (
        f"‚öîÔ∏è –†–∞—É–Ω–¥ {round_num} ‚öîÔ∏è\n"
        f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {fight_context['user_hp']}/{user.health}\n"
        f"–ú–∞–Ω–∞: {fight_context['user_mana']}/{user.mana}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ {monster.name}: {fight_context['monster_hp']}/{monster.health}\n"
        f"{buffs_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def fight_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—é"""
    query = update.callback_query
    await query.answer()
    
    u_tg_id = str(query.from_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()
    fight_context = context.user_data.get('fight_context')
    
    if not fight_context or not user:
        await query.edit_message_text(text="–ë–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return
    
    monster = fight_context['monster']
    action = query.data.split('_')[1]
    result_message = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if action == "attack":
        user_attack = calculate_user_attack(user, fight_context['buffs']['attack'])
        monster_damage = max(1, user_attack - monster.defense)
        fight_context['monster_hp'] -= monster_damage
        result_message = f"–í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –∏ –Ω–∞–Ω–µ—Å–ª–∏ {monster_damage} —É—Ä–æ–Ω–∞!"
        
    elif action == "useitem":
        item_id = int(query.data.split('_')[2])
        item = next((i for i in fight_context['items'] if i['id'] == item_id), None)
        if not item:
            result_message = "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        else:
            effect_message = apply_item_effect(user, item, fight_context)
            
            print("Item",item)
            print("Item_id",item_id)
            user.inventory[str(item['id'])] = user.inventory.get(str(item['id']), 0) - 1
            if user.inventory[str(item['id'])] <= 0:
                del user.inventory[str(item['id'])]
                logging.info(f"–ü—Ä–µ–¥–º–µ—Ç {item['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_tg_id}")

            flag_modified(user, "inventory")
            result_message = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item['name']}!\n" + effect_message
            try:
                session.add(user)
                session.commit()
                effect_message = apply_item_effect(user, item, fight_context)
                result_message = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item['name']}!\n" + effect_message
            except Exception as e:
                session.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
                result_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞!"
    
    elif action == "useskill":
        skill_id = int(query.data.split('_')[2])
        skill = next((s for s in fight_context['skills'] if s['id'] == skill_id), None)
        if not skill:
            result_message = "–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        elif fight_context['user_mana'] < skill['mana_cost']:
            result_message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞!"
        else:
            effect_message = apply_skill_effect(user, skill, fight_context)
            fight_context['user_mana'] -= skill['mana_cost']
            result_message = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {skill['name']}!\n" + effect_message
    
    elif action == "flee":
        if random.random() < 0.6:
            user.energy -= 1
            session.commit()
            await query.edit_message_text(
                text="–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏ –æ—Ç –º–æ–Ω—Å—Ç—Ä–∞! (–≠–Ω–µ—Ä–≥–∏—è -1)",
            )
            context.user_data.pop('fight_context', None)
            return
        else:
            result_message = "–í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
    if fight_context['monster_hp'] <= 0:
        reward_gold = random.randint(10, 20) * fight_context['round']
        reward_xp = random.randint(20, 30) * fight_context['round']
        
        user.gold += reward_gold
        user.xp += reward_xp
        user.energy -= 1
        session.commit()
        
        await query.edit_message_text(
            text=f"{result_message}\n\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞ {monster.name}!\n"
                 f"–ü–æ–ª—É—á–µ–Ω–æ: {reward_gold} –∑–æ–ª–æ—Ç–∞ –∏ {reward_xp} –æ–ø—ã—Ç–∞."
        )
        context.user_data.pop('fight_context', None)
        return
    
    # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É–±–µ–∂–∞–ª)
    if action != "flee":
        monster_attack = calculate_monster_attack(monster)
        user_defense = user.defense + fight_context['buffs']['defense']
        user_damage = max(1, monster_attack - user_defense)
        fight_context['user_hp'] -= user_damage
        result_message += f"\n{monster.name} –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {user_damage} —É—Ä–æ–Ω–∞!"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞)
    if fight_context['user_hp'] <= 0:
        user.energy -= 1
        session.commit()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data.pop('fight_context', None)
        await query.edit_message_text(
            text=f"{result_message}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–æ—é —Å {monster.name}! (–≠–Ω–µ—Ä–≥–∏—è -1)",
        )
        return
    
    # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞—Ñ—Ñ–æ–≤
    if fight_context['buffs']['attack'] > 0:
        fight_context['buffs']['attack'] = max(0, fight_context['buffs']['attack'] - 1)
    if fight_context['buffs']['defense'] > 0:
        fight_context['buffs']['defense'] = max(0, fight_context['buffs']['defense'] - 1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    fight_context['round'] += 1
    await query.edit_message_text(text=result_message)
    await send_round_info(update, context, user, monster, fight_context['round'])

def calculate_user_attack(user, attack_buff=0):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –±–∞—Ñ—Ñ–æ–≤"""
    base_attack = user.attack + attack_buff
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ—Ç -10% –¥–æ +10% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–Ω–∞)
    final_attack = base_attack + random.randint(-base_attack // 10, base_attack // 10)
    return max(1, final_attack)

def calculate_monster_attack(monster):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä–∞"""
    base_attack = monster.attack
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ—Ç -15% –¥–æ +15% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–Ω–∞)
    final_attack = base_attack + random.randint(-base_attack * 15 // 100, base_attack * 15 // 100)
    return max(1, final_attack)

def apply_item_effect(user, item, fight_context):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –º–æ–∫-–ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    effect_message = ""
    
    if item['type'] == "heal":
        heal_amount = item['power']
        max_hp = user.health
        fight_context['user_hp'] = min(max_hp, fight_context['user_hp'] + heal_amount)
        effect_message = f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {heal_amount} –∑–¥–æ—Ä–æ–≤—å—è."
    
    elif item['type'] == "buff_attack":
        fight_context['buffs']['attack'] = item['power']
        effect_message = f"–í–∞—à–∞ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {item['power']} –Ω–∞ 3 —Ä–∞—É–Ω–¥–∞."
    
    elif item['type'] == "escape":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–±–µ–≥
        user.energy -= 1
        session.commit()
        effect_message = "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥—ã–º–æ–≤—É—é —à–∞—à–∫—É –∏ —Å–±–µ–∂–∞–ª–∏!"
        fight_context['user_hp'] = 0  # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π
    
    return effect_message

def apply_skill_effect(user, skill, fight_context):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –º–æ–∫-–Ω–∞–≤—ã–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    effect_message = ""
    
    if skill['type'] == "damage":
        damage = skill['power'] + user.magic_attack // 2
        fight_context['monster_hp'] -= damage
        effect_message = f"–ù–∞–Ω–µ—Å–µ–Ω–æ {damage} –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞."
    
    elif skill['type'] == "heal":
        heal_amount = skill['power'] + user.magic_attack // 2
        max_hp = user.health
        fight_context['user_hp'] = min(max_hp, fight_context['user_hp'] + heal_amount)
        effect_message = f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {heal_amount} –∑–¥–æ—Ä–æ–≤—å—è."
    
    elif skill['type'] == "buff_defense":
        fight_context['buffs']['defense'] = skill['power']
        effect_message = f"–í–∞—à–∞ –∑–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {skill['power']} –Ω–∞ 3 —Ä–∞—É–Ω–¥–∞."
    
    return effect_message

ITEMS = {
    "sword": {"name": "üó° –ú–µ—á —Ä—ã—Ü–∞—Ä—è", "attack": 5, "cost": 20},
    "shield": {"name": "üõ° –©–∏—Ç —Å—Ç—Ä–∞–∂–∞", "defense": 3, "cost": 15},
    "potion": {"name": "üß™ –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "heal": 10, "cost": 5}
}

# üè™ –ö–æ–º–∞–Ω–¥–∞ /shop ‚Äî –ú–∞–≥–∞–∑–∏–Ω
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    items = session.query(Item).filter(Item.price > 0).order_by(Item.price).all()
    
    if not items:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    keyboard = [
        [InlineKeyboardButton(
            f"{item.name} - {item.price}üí∞", 
            callback_data=f"buy_{item.item_id}"
        )] 
        for item in items
    ]
    #keyboard = [
     #   [InlineKeyboardButton(f"{item['name']} - {item['cost']}üí∞", callback_data=f"buy_{key}")]
     #   for key, item in ITEMS.items()
    #]
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if user:
        shop_text = (
            f"üè™ *–ú–∞–≥–∞–∑–∏–Ω*\n"
            f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: *{user.gold}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=shop_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )

# üõí –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    data = query.data.split("_")  # –ü–æ–ª—É—á–∏–º ['buy', 'sword'] –∏–ª–∏ ['buy', 'shield']
    try:
        item_id = int(data[1])
    except (IndexError, ValueError):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞!")
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        return

    item = session.query(Item).filter_by(item_id=item_id).first()
    if not item:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logging.error(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if not user:
        await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id={u_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∑–æ–ª–æ—Ç–∞
    if user.gold < item.price:
        await query.message.reply_text(f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {item.price}üí∞, —É –≤–∞—Å {user.gold}üí∞")
        logging.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_tg_id} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item.name}.")
        return
   
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if user.inventory is None or not isinstance(user.inventory, dict):
        user.inventory = {}
        logging.info(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_tg_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º item_id –∫–∞–∫ –∫–ª—é—á)
    user.inventory[str(item.item_id)] = user.inventory.get(str(item.item_id), 0) + 1
    flag_modified(user, "inventory")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–µ–¥–º–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    #if item.attack_bonus > 0:
    #   user.attack += item.attack_bonus
    #if item.defense_bonus > 0:
    #    user.defense += item.defense_bonus
        
    # –í—ã—á–∏—Ç–∞–µ–º –∑–æ–ª–æ—Ç–æ
    user.gold -= item.price
    session.add(user)

    try:
        session.commit()
        logging.info(f"–ü–æ–∫—É–ø–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u_tg_id} –∫—É–ø–∏–ª {item.name} –∑–∞ {item.price}üí∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        #bonus_text = ""
        #if item.attack_bonus > 0:
        #    bonus_text += f"\n‚öîÔ∏è +{item.attack_bonus} –∫ –∞—Ç–∞–∫–µ"
        #if item.defense_bonus > 0:
        #    bonus_text += f"\nüõ° +{item.defense_bonus} –∫ –∑–∞—â–∏—Ç–µ"
        
        await query.message.reply_text(
            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {item.name} –∑–∞ {item.price}üí∞!\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user.gold}üí∞"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
        await shop(update, context)
        
    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ö–æ–º–∞–Ω–¥–∞ /quest ‚Äî –∫–≤–µ—Å—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
async def quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ï–©–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢",
        reply_markup=main_menu_keyboard()
    )



# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.Regex("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), profile))
    application.add_handler(MessageHandler(filters.Regex("‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º"), fight))
    application.add_handler(MessageHandler(filters.Regex("üõí –ú–∞–≥–∞–∑–∏–Ω"), shop))
    #application.add_handler(MessageHandler(filters.Regex("üìú –ö–≤–µ—Å—Ç—ã"), quest))
    application.add_handler(CallbackQueryHandler(fight_action, pattern="^fight_"))
    application.add_handler(CallbackQueryHandler(buy_item, pattern="^buy"))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()