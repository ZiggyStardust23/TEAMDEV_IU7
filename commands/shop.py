import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes
)
from sqlalchemy.orm.attributes import flag_modified
from db.db import Item, User
from db.dbSession import session
from gui.keyboards import main_menu_keyboard

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    items = session.query(Item).filter(Item.price > 0).order_by(Item.price).all()
    
    if not items:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    keyboard = [
        [InlineKeyboardButton(
            f"{item.name} - {item.price}üí∞", 
            callback_data=f"buy_{item.item_id}"
        )] 
        for item in items
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if user:
        shop_text = (
            f"üè™ *–ú–∞–≥–∞–∑–∏–Ω*\n"
            f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: *{user.gold}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=shop_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=main_menu_keyboard()
        )

async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("_")
    try:
        item_id = int(data[1])
    except (IndexError, ValueError):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞!")
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        return

    item = session.query(Item).filter_by(item_id=item_id).first()
    if not item:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logging.error(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()

    if not user:
        await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id={u_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    if user.gold < item.price:
        await query.message.reply_text(f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {item.price}üí∞, —É –≤–∞—Å {user.gold}üí∞")
        logging.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_tg_id} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item.name}.")
        return
   
    if user.inventory is None or not isinstance(user.inventory, dict):
        user.inventory = {}
        logging.info(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_tg_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")

    user.inventory[str(item.item_id)] = user.inventory.get(str(item.item_id), 0) + 1
    flag_modified(user, "inventory")
        
    user.gold -= item.price
    session.add(user)

    try:
        session.commit()
        logging.info(f"–ü–æ–∫—É–ø–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u_tg_id} –∫—É–ø–∏–ª {item.name} –∑–∞ {item.price}üí∞")
        
        await query.message.reply_text(
            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {item.name} –∑–∞ {item.price}üí∞!\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user.gold}üí∞"
        )

        await shop(update, context)
        
    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")