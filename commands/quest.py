import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes
)
from sqlalchemy.orm.attributes import flag_modified
from db.db import Item, User, Quest, Monster
from db.dbSession import session
from gui.keyboards import main_menu_keyboard

async def quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()
    
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    keyboard = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç
    if user.active_quest_id:
        quest = session.query(Quest).get(user.active_quest_id)
        keyboard.append([InlineKeyboardButton("üìå –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç", callback_data="current_quest")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data="cancel_quest")])
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
        available_quests = session.query(Quest).filter(
            Quest.min_level <= user.level,
            ~Quest.quest_id.in_(user.completed_quests)
        ).limit(3).all()
        
        for quest in available_quests:
            keyboard.append([InlineKeyboardButton(
                f"{quest.name} (–£—Ä. {quest.min_level})", 
                callback_data=f"accept_quest_{quest.quest_id}"
            )])
    
    #keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await update.message.reply_text(
        "üìú –î–æ—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    
async def handle_quest_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("1")
    query = update.callback_query
    print("2")
    await query.answer()
    print("3")
    data = query.data
    print("4")
    
    u_tg_id = str(update.effective_user.id)
    user = session.query(User).filter_by(tg_id=u_tg_id).first()
    if not user:
        return

    if data == "current_quest":
        quest = session.query(Quest).get(user.active_quest_id)
        progress = get_quest_progress(user, quest)
        await query.edit_message_text(
            f"üìå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: {quest.name}\n"
            f"‚ñ∏ {quest.description}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{quest.required}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {quest.reward_gold}üí∞ + {quest.reward_xp} XP",
            #reply_markup=InlineKeyboardMarkup([
            #    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_quests")]
            #])
        )
    
    elif data == "cancel_quest":
        user.active_quest_id = None
        user.quest_progress = 0
        session.commit()
        await query.edit_message_text(
            "–ö–≤–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω!",
            #reply_markup=InlineKeyboardMarkup([
            #    [InlineKeyboardButton("üìú –ö —Å–ø–∏—Å–∫—É –∫–≤–µ—Å—Ç–æ–≤", callback_data="back_to_quests")]
            #])
        )
    
    elif data.startswith("accept_quest_"):
        print("TESTSETSET")
        quest_id = int(data.split("_")[2])
        print(quest_id)
        user.active_quest_id = quest_id
        print(user.active_quest_id)
        user.quest_progress = 0
        print(user.quest_progress)
        session.commit()
        await query.edit_message_text(
            text="üéâ –ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            #reply_markup=InlineKeyboardMarkup([
            #    [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            #    [InlineKeyboardButton("üìú –ö –∫–≤–µ—Å—Ç–∞–º", callback_data="quest")]
            #])
        )

def get_quest_progress(user, quest):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞"""
    if quest.quest_type == "kill":
        # –í –≤–∞—à–µ–º –±–æ—é –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —É–±–∏–π—Å—Ç–≤ –Ω—É–∂–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
        return user.quest_progress
    elif quest.quest_type == "collect":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        return user.inventory.get(str(quest.target), 0)
    return user.quest_progress

def check_quest_completion(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã"""
    if not user.active_quest_id:
        return False
    
    quest = session.query(Quest).get(user.active_quest_id)
    progress = get_quest_progress(user, quest)
    
    if progress >= quest.required:
        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        user.gold += quest.reward_gold
        user.xp += quest.reward_xp
        if quest.reward_item_id:
            user.inventory[str(quest.reward_item_id)] = user.inventory.get(str(quest.reward_item_id), 0) + 1
            flag_modified(user, "inventory")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        if not user.completed_quests:
            user.completed_quests = []
        user.completed_quests.append(quest.quest_id)
        flag_modified(user, "completed_quests")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç
        user.active_quest_id = None
        user.quest_progress = 0
        session.commit()
        
        return True
    return False

'''# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—è –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤
async def fight_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
    if fight_context['monster_hp'] <= 0:
        user = session.query(User).filter_by(tg_id=u_tg_id).first()
        if user.active_quest_id:
            quest = session.query(Quest).get(user.active_quest_id)
            if quest.quest_type == "kill" and str(quest.target) == str(monster.id):
                user.quest_progress += 1
                session.commit()
                if check_quest_completion(user):
                    await query.edit_message_text(
                        text=f"{result_message}\n\nüéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∫–≤–µ—Å—Ç {quest.name}!\n"
                             f"–ü–æ–ª—É—á–µ–Ω–æ: {quest.reward_gold}üí∞ –∏ {quest.reward_xp} XP",
                    )
                    return

'''